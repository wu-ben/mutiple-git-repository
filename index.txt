
一、git config 存于3个位置
1. /ect/gitconfig  // 系统级 查看 --system -l
2. ~/.gitconfig  // 用户级  查看 --global -l
3. 仓库目录/.git/config  项目级 查看 --local -l

二、操作指定级别的config
1. 查看生效配置 git config -l

1. 查看全局设置
    git config --global --list  // --list 简写 -l

2. 增加项
    git config --global --add configName configValue
    git config --global --add user.name hahaha  // 增加user.name为hahaha

3. 修改
    git config --global configName configValue  // 只能修改唯一configName的值

4. 删除
    git config --global --unset configName

5. 多个值时无法删除，需要替换
    git config --global --replace-all user.name "wuhf"

----------------------------------------------------------------
三、本机建立2个git账号
1. 创建SSH Key
    ssh-keygen -t rsa -C "whf81248@163.com"
   指定命名称
    Enter file in which to save the key (/root/.ssh/id_rsa): /root/.ssh/id_rsa_gitee
   按2次回车，表示密码设为空

2. 创建 github 的SSH Key为
    ssh-keygen -t rsa -C "whf82828@gmail.com"
   命名为
    id_rsa_github

3. 在ssh文件夹下新建config文件，编辑内容
    # gitee
    Host gitee
    HostName gitee.com
    User whf20g
    IdentityFile ~/.ssh/id_rsa_gitee

    # github 
    Host github
    HostName github.com
    User wu-ben
    IdentityFile ~/.ssh/id_rsa_github

4. 复制id_rsa_xxx 的内容到对应的网站的SSH里

5. 添加文件到ssh，因为默认只读取id_rsa，为了让SSH识别新的私钥，需将其添加到SSH agent中
    ssh-agent：是一个可以控制和保存公钥身份验证所使用的私钥的程序，可以理解为一个密钥管理器
    ssh-agent 是一个守护进程（daemon），设计它的唯一目的就是对解密的专用私钥进行高速缓存。

  (1) 清空私钥
    $ ssh-add -D

    如果没有正在运行的 ssh-agent，运行
    eval "$(ssh-agent -s)"
     
  (2) 添加私钥
   ssh-add ~/.ssh/id_rsa_gitee

   如果出现Could not open a connection to your authentication agent的错误，运行
    ssh-agent bash
    ssh-add ~/.ssh/id_rsa_gitee

  (3) 查看已添加的私钥
   ssh-add -l

6. 测试是否连接成功
    ssh -T git@github.com // 未配置config时
    ssh -T git@github  // 使用config中配置的Host
    ssh -T git@gitee  // 使用config中Host配置

7. 删除默认全局配置。配置了2个账号，提交时会有冲突，必须删除默认的，为每个项目配置不同的
    git config --global --unset user.name
    git config --global --unset user.email

8. 为每个项目添加自己的账号和邮箱



7. Clone 到本地
    git clone git@github.com:wu-ben/learngit.git  // 未配置config时
    git clone git@github:wu-ben/learngit.git  // 配置了config，用config里的Host配置项



四、同时关联2个远程仓库
1. 把目录变成git仓库
    git init

2. 在github 和 gitee上分别建立远程仓库 mutiple-git-repository

3. 关联github，远程仓库起名叫mutihub
    git remote add mutihub git@github.com:wu-ben/mutiple-git-repository.git

4. 关联gitee,远程仓库名起名叫mutiee
    git remote add mutiee git@gitee.com:whf20g/mutiple-git-repository

5. 查看远程仓库
    git remote -v

---------------------------------------------

五、
1. 用本地github_gmail账户关联github远程mutiple-git-repository仓库，远程仓库重命名为mutihub
    git remote add mutihub git@github_gmail:wu-ben/mutiple-git-repository.git

2. 推送到远程
    git push -u mutihub master  // 第一次推送加上-u，之后就不用了
    git push --set-upstream mutihub master  // -u 的完整写法

git@github.com:wu-ben/mutiple-git-repository.git

Updates were rejected because the remote contains work that you do
not have locally. This is usually caused by another repository pushing
to the same ref. You may want to first integrate the remote changes
(e.g., 'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.


If you are planning on basing your work on an upstream
branch that already exists at the remote, you may need to
run "git fetch" to retrieve it.

If you are planning to push out a new local branch that
will track its remote counterpart, you may want to use
"git push -u" to set the upstream config as you push.


$ git fetch <远程主机名> <远程分支名>:<本地分支名>
$ git pull <远程主机名> <远程分支名>:<本地分支名>
如果远程分支是与当前分支合并，则冒号后面的部分可以省略：

1. git fetch origin 远程分支mast:本地分支test // 拉取远程分支mast，并创建本地分支test，不切换分支
    本地新建分支，但是不会切换到该本地分支，不会和远程分支建立映射关系。需要手动checkout切换分支。 

2. git checkout -b 本地分支test origin/远程分支mast  //拉取远程分支mast，并创建本地分支test，本地切换到test分支
    创建的本地分支会与远程分支建立映射关系

3. git branch -vv // 查看本地分支与远程分支的关系
    最近一条有蓝色字表示关联上了

4. git branch -u origin/远程分支 // 将当前分支映射到远程的指定分支

5. 本地和远程都建立了文件夹和内容，可以关联上，但推送时报错
    fatal: refusing to merge unrelated histories
    拒绝合并不相关的历史
    解决: 加上--allow-unrelated-history 合并两个独立启动仓库的历史
    git pull origin master:master --allow-unrelated-histories // :前后相同可省略一个 
